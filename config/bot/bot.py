#!/usr/bin/env python3
"""
Matrix Bot –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è Matrix Dendrite —Å–µ—Ä–≤–µ—Ä–æ–º
–ê–≤—Ç–æ—Ä: Matrix Setup Team
"""

import asyncio
import json
import logging
import os
import requests
from datetime import datetime
from typing import Dict, List, Optional, Any

import nio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- WHITELIST ---
# –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º
ALLOWED_ROOMS = os.getenv('MATRIX_BOT_ROOM_ID', '').split(',')  # –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–ª—ñ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É
ALLOWED_USERS = os.getenv('MATRIX_BOT_ADMINS', '').split(',')   # user_id —á–µ—Ä–µ–∑ –∫–æ–º—É

class MatrixAdminBot:
    def __init__(self):
        # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        self.homeserver_url = os.getenv('MATRIX_HOMESERVER_URL', 'http://dendrite:8008')
        self.bot_username = os.getenv('MATRIX_BOT_USERNAME', 'system-bot')
        self.bot_password = os.getenv('MATRIX_BOT_PASSWORD', '')
        self.admin_room_id = os.getenv('MATRIX_BOT_ROOM_ID', '')
        self.admin_panel_url = os.getenv('ADMIN_PANEL_URL', 'http://admin-panel:3000')
        
        # Matrix –∫–ª—ñ—î–Ω—Ç
        self.client = None
        
        # –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
        self.commands = {
            '/help': self.cmd_help,
            '/status': self.cmd_status,
            '/logs': self.cmd_logs,
            '/start': self.cmd_start,
            '/stop': self.cmd_stop,
            '/restart': self.cmd_restart,
            '/backup': self.cmd_backup,
            '/user': self.cmd_user,
            '/bridges': self.cmd_bridges,
            '/health': self.cmd_health,
            '/update': self.cmd_update,
        }

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Matrix –∫–ª—ñ—î–Ω—Ç–∞
            self.client = nio.AsyncClient(self.homeserver_url, self.bot_username)
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
            response = await self.client.login(self.bot_password)
            if response.status_code != 200:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {response.status_code}")
                return
            
            logger.info(f"–ë–æ—Ç {self.bot_username} —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è callback –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            self.client.add_event_callback(self.on_message, nio.RoomMessageText)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
            await self.client.sync()
            
            # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
            while True:
                try:
                    await self.client.sync()
                    await asyncio.sleep(1)
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
                    await asyncio.sleep(5)
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

    async def on_message(self, room, event):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if hasattr(event, 'body'):
                body = event.body.strip()
            else:
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–∞
            if not body.startswith('/'):
                return
            
            # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–º–Ω–∞—Ç–∏ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
            sender = event.sender
            if room.room_id not in ALLOWED_ROOMS:
                await self.send_message(room.room_id, '‚õîÔ∏è –ù–µ–¥–æ–∑–≤–æ–ª–µ–Ω–∞ –∫—ñ–º–Ω–∞—Ç–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è.')
                return
            if ALLOWED_USERS and sender not in ALLOWED_USERS:
                await self.send_message(room.room_id, '‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è.')
                return
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥–∏
            parts = body.split()
            command = parts[0].lower()
            args = parts[1:] if len(parts) > 1 else []
            
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
            if command in self.commands:
                await self.commands[command](room, args)
            else:
                await self.send_message(room.room_id, f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {command}. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await self.send_message(room.room_id, f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏: {e}")

    async def send_message(self, room_id: str, message: str):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            if self.client is not None:
                await self.client.room_send(
                    room_id,
                    'm.room.message',
                    {
                        'msgtype': 'm.text',
                        'body': message
                    }
                )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    def call_admin_api(self, endpoint: str, method: str = 'GET', data: dict = None) -> dict:
        """–í–∏–∫–ª–∏–∫ API –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
        try:
            url = f"{self.admin_panel_url}/api/{endpoint}"
            headers = {'Content-Type': 'application/json'}
            
            if method == 'GET':
                response = requests.get(url, headers=headers)
            elif method == 'POST':
                response = requests.post(url, headers=headers, json=data)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers)
            else:
                return {'success': False, 'error': '–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥'}
            
            return response.json()
        except Exception as e:
            return {'success': False, 'error': str(e)}

    # –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
    async def cmd_help(self, room, args):
        """–î–æ–ø–æ–º–æ–≥–∞"""
        help_text = """
ü§ñ **Matrix Admin Bot - –î–æ–≤—ñ–¥–∫–∞**

**–°–µ—Ä–≤—ñ—Å–∏:**
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
‚Ä¢ `/start <service>` - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å
‚Ä¢ `/stop <service>` - –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å
‚Ä¢ `/restart <service>` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å
‚Ä¢ `/logs <service> [lines]` - –ª–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 100 —Ä—è–¥–∫—ñ–≤)

**–ë–µ–∫–∞–ø–∏:**
‚Ä¢ `/backup create` - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø
‚Ä¢ `/backup list` - —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø—ñ–≤
‚Ä¢ `/backup restore <name>` - –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –±–µ–∫–∞–ø

**–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**
‚Ä¢ `/user create <username> <password>` - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
‚Ä¢ `/user list` - —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚Ä¢ `/user delete <username>` - –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

**–ú–æ—Å—Ç–∏:**
‚Ä¢ `/bridges status` - —Å—Ç–∞—Ç—É—Å –º–æ—Å—Ç—ñ–≤
‚Ä¢ `/bridges restart <name>` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º—ñ—Å—Ç

**–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ `/health` - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
‚Ä¢ `/update` - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
‚Ä¢ `/help` - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

**–ü—Ä–∏–∫–ª–∞–¥–∏:**
‚Ä¢ `/status`
‚Ä¢ `/restart dendrite`
‚Ä¢ `/logs postgres 50`
‚Ä¢ `/backup create`
‚Ä¢ `/user create john password123`
‚Ä¢ `/update`
        """
        await self.send_message(room.room_id, help_text)

    async def cmd_status(self, room, args):
        """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        try:
            response = self.call_admin_api('status')
            if response.get('success'):
                services = response.get('services', [])
                
                status_text = "üìä **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤:**\n\n"
                for service in services:
                    status_emoji = "üü¢" if service['status'] == 'running' else "üî¥"
                    status_text += f"{status_emoji} **{service['name']}**: {service['status']}\n"
                
                await self.send_message(room.room_id, status_text)
            else:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def cmd_logs(self, room, args):
        """–õ–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—É"""
        if len(args) < 1:
            await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/logs <service> [lines]`")
            return
        
        service = args[0]
        lines = args[1] if len(args) > 1 else '100'
        
        try:
            response = self.call_admin_api(f'logs/{service}?lines={lines}')
            if response.get('success'):
                logs = response.get('logs', '')
                # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ª–æ–≥—ñ–≤
                if len(logs) > 2000:
                    logs = logs[:2000] + "\n... (–æ–±—Ä—ñ–∑–∞–Ω–æ)"
                
                await self.send_message(room.room_id, f"üìã **–õ–æ–≥–∏ {service}:**\n```\n{logs}\n```")
            else:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def cmd_start(self, room, args):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É"""
        if len(args) < 1:
            await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/start <service>`")
            return
        
        service = args[0]
        try:
            response = self.call_admin_api(f'service/start/{service}', 'POST')
            if response.get('success'):
                await self.send_message(room.room_id, f"‚úÖ {response.get('message', f'–°–µ—Ä–≤—ñ—Å {service} –∑–∞–ø—É—â–µ–Ω–æ')}")
            else:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def cmd_stop(self, room, args):
        """–ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—É"""
        if len(args) < 1:
            await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/stop <service>`")
            return
        
        service = args[0]
        try:
            response = self.call_admin_api(f'service/stop/{service}', 'POST')
            if response.get('success'):
                await self.send_message(room.room_id, f"‚úÖ {response.get('message', f'–°–µ—Ä–≤—ñ—Å {service} –∑—É–ø–∏–Ω–µ–Ω–æ')}")
            else:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def cmd_restart(self, room, args):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É"""
        if len(args) < 1:
            await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/restart <service>`")
            return
        
        service = args[0]
        try:
            response = self.call_admin_api(f'service/restart/{service}', 'POST')
            if response.get('success'):
                await self.send_message(room.room_id, f"‚úÖ {response.get('message', f'–°–µ—Ä–≤—ñ—Å {service} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ')}")
            else:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def cmd_backup(self, room, args):
        """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–µ–∫–∞–ø–∞–º–∏"""
        if len(args) < 1:
            await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/backup <create|list|restore> [name]`")
            return
        
        action = args[0]
        
        if action == 'create':
            try:
                response = self.call_admin_api('backups/create', 'POST')
                if response.get('success'):
                    await self.send_message(room.room_id, f"‚úÖ {response.get('message', '–ë–µ–∫–∞–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ')}")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        elif action == 'list':
            try:
                response = self.call_admin_api('backups')
                if response.get('success'):
                    backups = response.get('backups', [])
                    if backups:
                        backup_text = "üì¶ **–°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø—ñ–≤:**\n\n"
                        for backup in backups[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 10 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö
                            backup_text += f"‚Ä¢ **{backup['name']}** ({backup['size']} –±–∞–π—Ç)\n"
                        await self.send_message(room.room_id, backup_text)
                    else:
                        await self.send_message(room.room_id, "üì¶ –ë–µ–∫–∞–ø—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        elif action == 'restore':
            if len(args) < 2:
                await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/backup restore <name>`")
                return
            
            backup_name = args[1]
            try:
                response = self.call_admin_api(f'backups/restore/{backup_name}', 'POST')
                if response.get('success'):
                    await self.send_message(room.room_id, f"‚úÖ {response.get('message', '–ë–µ–∫–∞–ø –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ')}")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        else:
            await self.send_message(room.room_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/backup <create|list|restore> [name]`")

    async def cmd_user(self, room, args):
        """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
        if len(args) < 1:
            await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/user <create|list|delete> [username] [password]`")
            return
        
        action = args[0]
        
        if action == 'create':
            if len(args) < 3:
                await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/user create <username> <password>`")
                return
            
            username = args[1]
            password = args[2]
            
            try:
                response = self.call_admin_api('users/create', 'POST', {
                    'username': username,
                    'password': password
                })
                if response.get('success'):
                    await self.send_message(room.room_id, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        elif action == 'list':
            try:
                response = self.call_admin_api('users')
                if response.get('success'):
                    users = response.get('users', [])
                    if users:
                        user_text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:**\n\n"
                        for user in users:
                            user_text += f"‚Ä¢ **{user['username']}**\n"
                        await self.send_message(room.room_id, user_text)
                    else:
                        await self.send_message(room.room_id, "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        elif action == 'delete':
            if len(args) < 2:
                await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/user delete <username>`")
                return
            
            username = args[1]
            try:
                response = self.call_admin_api(f'users/{username}', 'DELETE')
                if response.get('success'):
                    await self.send_message(room.room_id, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} –≤–∏–¥–∞–ª–µ–Ω–æ")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        else:
            await self.send_message(room.room_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/user <create|list|delete> [username] [password]`")

    async def cmd_bridges(self, room, args):
        """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –º–æ—Å—Ç–∞–º–∏"""
        if len(args) < 1:
            await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/bridges <status|restart> [name]`")
            return
        
        action = args[0]
        
        if action == 'status':
            try:
                response = self.call_admin_api('bridges/status')
                if response.get('success'):
                    bridges = response.get('bridges', [])
                    if bridges:
                        bridge_text = "üåâ **–°—Ç–∞—Ç—É—Å –º–æ—Å—Ç—ñ–≤:**\n\n"
                        for bridge in bridges:
                            status_emoji = "üü¢" if bridge['status'] == 'running' else "üî¥"
                            bridge_text += f"{status_emoji} **{bridge['name']}**: {bridge['status']}\n"
                        await self.send_message(room.room_id, bridge_text)
                    else:
                        await self.send_message(room.room_id, "üåâ –ú–æ—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        elif action == 'restart':
            if len(args) < 2:
                await self.send_message(room.room_id, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/bridges restart <name>`")
                return
            
            bridge_name = args[1]
            try:
                response = self.call_admin_api(f'bridges/restart/{bridge_name}', 'POST')
                if response.get('success'):
                    await self.send_message(room.room_id, f"‚úÖ {response.get('message', f'–ú—ñ—Å—Ç {bridge_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ')}")
                else:
                    await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
            except Exception as e:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        else:
            await self.send_message(room.room_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/bridges <status|restart> [name]`")

    async def cmd_health(self, room, args):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
        try:
            response = self.call_admin_api('health')
            if response.get('success'):
                health = response.get('health', [])
                summary = response.get('summary', {})
                
                healthy = summary.get('healthy', 0)
                unhealthy = summary.get('unhealthy', 0)
                total = summary.get('total', 0)
                
                message = f"üè• **Healthcheck —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n"
                message += f"‚úÖ –ó–¥–æ—Ä–æ–≤—ñ: {healthy}\n"
                message += f"‚ùå –ù–µ–∑–¥–æ—Ä–æ–≤—ñ: {unhealthy}\n"
                message += f"üìä –í—Å—å–æ–≥–æ: {total}\n\n"
                
                if unhealthy > 0:
                    unhealthy_services = [h['name'] for h in health if not h.get('healthy')]
                    message += f"‚ö†Ô∏è **–ù–µ–∑–¥–æ—Ä–æ–≤—ñ —Å–µ—Ä–≤—ñ—Å–∏:**\n"
                    for service in unhealthy_services:
                        message += f"‚Ä¢ {service}\n"
                else:
                    message += "üéâ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
                
                await self.send_message(room.room_id, message)
            else:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ healthcheck: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def cmd_update(self, room, args):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"""
        try:
            await self.send_message(room.room_id, "üîÑ –ü–æ—á–∞—Ç–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤...")
            
            response = self.call_admin_api('update', method='POST')
            if response.get('success'):
                await self.send_message(room.room_id, "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π healthcheck
                health_response = self.call_admin_api('health')
                if health_response.get('success'):
                    summary = health_response.get('summary', {})
                    healthy = summary.get('healthy', 0)
                    total = summary.get('total', 0)
                    await self.send_message(room.room_id, f"üìä –°—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {healthy}/{total} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –ø—Ä–∞—Ü—é—é—Ç—å")
            else:
                await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {response.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}")
        except Exception as e:
            await self.send_message(room.room_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    async def send_notification(self, message: str, room_id: str = None):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"""
        try:
            target_room = room_id or self.admin_room_id
            if not target_room:
                logger.warning("–ù–µ –≤–∫–∞–∑–∞–Ω–æ room_id –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
                return
            
            response = self.call_admin_api('notifications/send', method='POST', data={
                'message': message,
                'roomId': target_room
            })
            
            if response and response.get('success'):
                logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {message}")
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {response.get('error') if response else '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

    async def healthcheck_notification(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º"""
        try:
            response = self.call_admin_api('health')
            if response.get('success'):
                summary = response.get('summary', {})
                unhealthy = summary.get('unhealthy', 0)
                
                if unhealthy > 0:
                    health = response.get('health', [])
                    unhealthy_services = [h['name'] for h in health if not h.get('healthy')]
                    
                    message = f"‚ö†Ô∏è **Healthcheck –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:**\n"
                    message += f"–ó–Ω–∞–π–¥–µ–Ω–æ {unhealthy} –Ω–µ–∑–¥–æ—Ä–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤:\n"
                    for service in unhealthy_services:
                        message += f"‚Ä¢ {service}\n"
                    
                    await self.send_notification(message)
                    logger.warning(f"Healthcheck: –∑–Ω–∞–π–¥–µ–Ω–æ {unhealthy} –Ω–µ–∑–¥–æ—Ä–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ healthcheck notification: {e}")

    async def backup_notification(self, action: str, details: str = ""):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –±–µ–∫–∞–ø"""
        try:
            message = f"üíæ **–ë–µ–∫–∞–ø {action}:**\n{details}"
            await self.send_notification(message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ backup notification: {e}")

    async def service_notification(self, service: str, action: str, status: str):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É"""
        try:
            emoji = "‚úÖ" if status == "success" else "‚ùå"
            message = f"{emoji} **–°–µ—Ä–≤—ñ—Å {service} {action}:** {status}"
            await self.send_notification(message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ service notification: {e}")

    async def background_tasks(self):
        """–§–æ–Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        while True:
            try:
                # Healthcheck –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                await self.healthcheck_notification()
                await asyncio.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")
                await asyncio.sleep(60)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    bot = MatrixAdminBot()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á
    await asyncio.gather(
        bot.start(),
        bot.background_tasks()
    )

if __name__ == "__main__":
    asyncio.run(main()) 